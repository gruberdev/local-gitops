version: '3'

vars:
  INT_REGISTRY: registry.localhost
  PATH_ERROR: is not installed or correctly configured in PATH.

dotenv: ['.env']

silent: true

includes:
  argocd: ./tasks/argocd.yaml
  tools: ./tasks/tools/{{OS}}.yaml
  cluster: ./tasks/cluster/{{OS}}.yaml
  cli: ./tasks/cli.yaml
  templates: ./tasks/templates.yaml

tasks:
  help:
    desc: Displays this message. Type 'task explain -- [command]' to have a in-depth explanation of each command
    cmds:
    - task: cli:highlight_bg
    - echo -e "If you want to understand more abount a command, type task explain -- [command]"
    - task: cli:reset
    - task --list

  default:
    cmds:
    - task: cluster:start
    - task: dns
    - task: argocd:install
    - task: certs
    - task: argocd:secret
    - task: argocd:repo
    - task: argocd:password
    ignore_error: true

  explain:
    desc: Explains a certain Task command more in-detail
    cmds:
    - task {{.CLI_ARGS}} --summary

  dns:
    desc: Creates the DNS entry required for the local domain to work.
    preconditions:
    - sh: "which hostctl"
      msg: "hostctl {{.PATH_ERROR}}"
    summary: |
      Configuring Local DNS configuration through hostctl

      This command uses hostctl to manage entries on /etc/hosts on a
      a cross operational system compatible way. This command should work
      on all MacOS, Windows and Linux. It adds all the '*.k8s.localhost'
      domains to your local DNS hosts file. It also makes it easy for the
      user to verse those changes, avoiding pollution on your hosts
      (or equivalent) file.
    cmds:
    - task: cli:clear
    - sleep 0.01 && {{if eq OS "windows"}}hostctl add k8s -q < config/.etchosts{{else}}sudo hostctl add k8s -q < config/.etchosts{{end}}
    - task: cli:highlight_normal
    - echo -e "Added 'k8s.localhost' and related domains to your hosts file!"
    - task: cli:reset

  certs:
    desc: Creates and uploads local certificates to the cluster as tls secrets
    dir: config/tls
    cmds:
    - task: cli:clear
    - task: cli:highlight_bg
    - echo -e "Creating local certificates\n"
    - task: cli:reset
    - rm cert.pem key.pem base/tls-secret.yaml ca.pem 2> /dev/null
    - mkcert -install
    - mkcert -cert-file cert.pem -key-file key.pem -p12-file p12.pem "*.k8s.localhost" k8s.localhost "*.localhost" ::1 127.0.0.1 localhost 127.0.0.1 "*.internal.localhost" "*.local" 2> /dev/null
    - base64 {{if eq OS "darwin"}}-b{{else}}-w{{end}} 0 cert.pem > ca.pem
    - task: cli:highlight_bg
    - echo -e "Creating certificate secrets on Kubernetes for local TLS enabled by default\n"
    - task: cli:reset
    - kubectl config set-context --current --namespace=kube-system --cluster=k3d-demo
    - kubectl create secret tls tls-secret --cert=cert.pem --key=key.pem --dry-run=client -o yaml >base/tls-secret.yaml
    - kubectl apply -k ./
    - task: cli:highlight_bg
    - echo -e "\nCertificate resources have been created.\n"
    - task: cli:reset
    ignore_error: true

  ns:system:
    cmds:
    - kubectl config set-context --current --namespace=kube-system --cluster=k3d-demo
    ignore_error: true
